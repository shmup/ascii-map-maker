// Generated by CoffeeScript 1.7.1
(function() {
  var AsciiMap, ascii_map,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AsciiMap = (function() {
    function AsciiMap(c) {
      this.c = c;
      this.write = __bind(this.write, this);
      this.ctx = this.c.getContext("2d");
    }

    AsciiMap.prototype.set_character = function(e) {
      return document.canvas_character = String.fromCharCode(e.which);
    };

    AsciiMap.prototype.get_character = function() {
      return document.canvas_character || "+";
    };

    AsciiMap.prototype.write = function(e) {
      var character, offsetX, offsetY, x, y;
      if (!e.which) {
        return;
      }
      this.ctx.font = "18px Source Code Pro";
      console.log(e);
      offsetX = e.offsetX ? e.offsetX : e.layerX;
      offsetY = e.offsetY ? e.offsetY : e.layerY;
      console.log(Math.floor(offsetX / document.cell_size));
      console.log(Math.floor(offsetY / document.cell_size));
      x = Math.floor(offsetX / document.cell_size) * document.cell_size;
      y = Math.floor(offsetY / document.cell_size) * document.cell_size;
      character = this.get_character();
      this.ctx.clearRect(x + 1, y + 1, document.cell_size - 1, document.cell_size - 1);
      this.ctx.fillText(character, x + 5, y + document.cell_size - 4);
      return document.storage.save(x, y, character);
    };

    AsciiMap.prototype.draw = function(width, height, cell_size) {
      var h, w, x, y;
      if (width == null) {
        width = 0;
      }
      if (height == null) {
        height = 0;
      }
      document.cell_size = cell_size;
      this.c.addEventListener('click', this.write);
      this.c.addEventListener('mousemove', this.write);
      document.addEventListener('keypress', this.set_character);
      x = 0.5;
      y = 0.5;
      w = width * cell_size + 1;
      h = height * cell_size + 1;
      this.c.width = w;
      this.c.height = h;
      while (x < w) {
        this.ctx.moveTo(x, 0);
        this.ctx.lineTo(x, h);
        x += cell_size;
      }
      while (y < h) {
        this.ctx.moveTo(0, y);
        this.ctx.lineTo(w, y);
        y += cell_size;
      }
      this.ctx.strokeStyle = "#ddd";
      return this.ctx.stroke();
    };

    return AsciiMap;

  })();

  document.MapStorage = (function() {
    function MapStorage(db_name, width, height) {
      this.db_name = db_name;
      this.width = width;
      this.height = height;
      this.map = localStorage.getItem(this.db_name) || this.build_map();
    }

    MapStorage.build_map = function() {
      var arr, i, _i, _len;
      arr = new Array(this.height);
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        i = arr[_i];
        arr[i] = new Array(this.width);
      }
      return arr;
    };

    MapStorage.prototype.save = function(x, y, character) {
      var data;
      data = {
        x: x,
        y: y,
        c: character
      };
      return localStorage.setItem(this.db_name, JSON.stringify(data));
    };

    return MapStorage;

  })();

  ascii_map = new AsciiMap(document.getElementById("c"));

  ascii_map.draw(100, 100, 20);

  document.storage = new document.MapStorage("map", 20, 30);

}).call(this);
